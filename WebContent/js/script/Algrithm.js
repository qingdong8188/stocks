
function Sign(x)
{
    if (x > 0)
    {
        return 1;
    }
    else if (x < 0) {
        return -1;
    }
    else
    {
        return 0;
    }
}

function Abs(x)
{
    if (x < 0) {
        return -x;
    }
    else
    {
        return x;
    }
}
function errorfunction(x)
{
    var result = 0;
    var xsq = 0;
    var s = 0;
    var p = 0;
    var q = 0;

    s = Sign(x);
    x = Abs(x);
    if( x<0.5 )
    {
        xsq = x*x;
        p = 0.007547728033418631287834;
        p = -0.288805137207594084924010+xsq*p;
        p = 14.3383842191748205576712+xsq*p;
        p = 38.0140318123903008244444+xsq*p;
        p = 3017.82788536507577809226+xsq*p;
        p = 7404.07142710151470082064+xsq*p;
        p = 80437.3630960840172832162+xsq*p;
        q = 0.0;
        q = 1.00000000000000000000000+xsq*q;
        q = 38.0190713951939403753468+xsq*q;
        q = 658.070155459240506326937+xsq*q;
        q = 6379.60017324428279487120+xsq*q;
        q = 34216.5257924628539769006+xsq*q;
        q = 80437.3630960840172826266+xsq*q;
        result = s*1.1283791670955125738961589031*x*p/q;
        return result;
    }
    if( x >=10 )
    {
        result = s;
        return result;
    }
    result = s*(1-errorfunctionc(x));
    return result;
}

function normaldistribution(input) {
    var result = 0;

    result = 0.5 * (errorfunction(input / 1.41421356237309504880) + 1);
    return result;
}

function invnormaldistribution( y0)
{
var result = 0;
var expm2 = 0;
var s2pi = 0;
var x = 0;
var y = 0;
var z = 0;
var y2 = 0;
var x0 = 0;
var x1 = 0;
var code = 0;
var p0 = 0;
var q0 = 0;
var p1 = 0;
var q1 = 0;
var p2 = 0;
var q2 = 0;

expm2 = 0.13533528323661269189;
s2pi = 2.50662827463100050242;
if( (y0)<=(0) )
{
    result = -Number.MAX_VALUE;
    return result;
}
if( (y0)>=(1) )
{
    result = Number.MAX_VALUE;
    return result;
}
code = 1;
y = y0;
if( (y)>(1.0-expm2) )
{
    y = 1.0-y;
    code = 0;
}
if( (y)>(expm2) )
{
    y = y-0.5;
    y2 = y*y;
    p0 = -59.9633501014107895267;
    p0 = 98.0010754185999661536+y2*p0;
    p0 = -56.6762857469070293439+y2*p0;
    p0 = 13.9312609387279679503+y2*p0;
    p0 = -1.23916583867381258016+y2*p0;
    q0 = 1;
    q0 = 1.95448858338141759834+y2*q0;
    q0 = 4.67627912898881538453+y2*q0;
    q0 = 86.3602421390890590575+y2*q0;
    q0 = -225.462687854119370527+y2*q0;
    q0 = 200.260212380060660359+y2*q0;
    q0 = -82.0372256168333339912+y2*q0;
    q0 = 15.9056225126211695515+y2*q0;
    q0 = -1.18331621121330003142+y2*q0;
    x = y+y*y2*p0/q0;
    x = x*s2pi;
    result = x;
    return result;
}
x = Math.sqrt(-(2.0*Math.log(y)));
x0 = x-Math.log(x)/x;
z = 1.0/x;
if( (x)<(8.0) )
{
    p1 = 4.05544892305962419923;
    p1 = 31.5251094599893866154+z*p1;
    p1 = 57.1628192246421288162+z*p1;
    p1 = 44.0805073893200834700+z*p1;
    p1 = 14.6849561928858024014+z*p1;
    p1 = 2.18663306850790267539+z*p1;
    p1 = -(1.40256079171354495875*0.1)+z*p1;
    p1 = -(3.50424626827848203418*0.01)+z*p1;
    p1 = -(8.57456785154685413611*0.0001)+z*p1;
    q1 = 1;
    q1 = 15.7799883256466749731+z*q1;
    q1 = 45.3907635128879210584+z*q1;
    q1 = 41.3172038254672030440+z*q1;
    q1 = 15.0425385692907503408+z*q1;
    q1 = 2.50464946208309415979+z*q1;
    q1 = -(1.42182922854787788574*0.1)+z*q1;
    q1 = -(3.80806407691578277194*0.01)+z*q1;
    q1 = -(9.33259480895457427372*0.0001)+z*q1;
    x1 = z*p1/q1;
}
else
{
    p2 = 3.23774891776946035970;
    p2 = 6.91522889068984211695+z*p2;
    p2 = 3.93881025292474443415+z*p2;
    p2 = 1.33303460815807542389+z*p2;
    p2 = 2.01485389549179081538*0.1+z*p2;
    p2 = 1.23716634817820021358*0.01+z*p2;
    p2 = 3.01581553508235416007*0.0001+z*p2;
    p2 = 2.65806974686737550832*0.000001+z*p2;
    p2 = 6.23974539184983293730*0.000000001+z*p2;
    q2 = 1;
    q2 = 6.02427039364742014255+z*q2;
    q2 = 3.67983563856160859403+z*q2;
    q2 = 1.37702099489081330271+z*q2;
    q2 = 2.16236993594496635890*0.1+z*q2;
    q2 = 1.34204006088543189037*0.01+z*q2;
    q2 = 3.28014464682127739104*0.0001+z*q2;
    q2 = 2.89247864745380683936*0.000001+z*q2;
    q2 = 6.79019408009981274425*0.000000001+z*q2;
    x1 = z*p2/q2;
}
x = x0-x1;
if( code!=0 )
{
    x = -x;
}
result = x;
return result;
}


